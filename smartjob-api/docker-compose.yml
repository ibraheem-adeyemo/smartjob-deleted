version: '3.7'
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - '3000:3000'
    depends_on:
      - db

  server:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - '3000:3000'
    depends_on:
      - db

  db:
    image: duvel/postgis:15-3.3
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  nginx:
    build:
      context: .
      dockerfile: NginxDockerfile
    restart: always
    ports:
      - 81:80
    depends_on:
      - server

volumes:
  postgres_data:



# version: '3.3'

# services:
#   db:
#     image: postgis/postgis:15-3.3-alpine
#     ports:
#       - 5433:5432
#     volumes:
#       - postgres_data:/data/postgres
#     environment:
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       POSTGRES_USER: ${DB_USER}
      
#   server:
#     build: .
#     ports:
#       - 5000:5000
#     environment:
#       DB_PASSWORD: ${DB_PASSWORD}
#       DB_HOST: db
#       DB_USER: ${DB_USER}

# volumes:
#   postgres_data:  