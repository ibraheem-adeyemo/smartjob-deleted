{"version":3,"file":"addressService.js","names":["_user","require","_models","createAddress","_ref","_asyncToGenerator2","_regenerator","mark","_callee","addObj","next","_context","country","state","city","subUrb","_long","lat","_addObj$userId","userId","_addObj$serviceId","serviceId","_addObj$jobId","jobId","addressObj","userAddress","wrap","_callee$","_context2","prev","long","location","type","coordinates","crs","properties","name","location_m","longitude","latitude","coordinate","_concat","concat","call","findUserAddress","sent","length","abrupt","statusCode","message","ADDRESS_ALREADY_CREATED","Address","create","stop","_x","_x2","apply","arguments","exports"],"sources":["../../src/services/addressService.js"],"sourcesContent":["import { findUserAddress } from './user';\r\nimport { Address } from '../../dbase/models'\r\n\r\nexport const createAddress = async (addObj, next) => {\r\n\r\n    const {country, state, city, subUrb, long, lat, userId=null, serviceId=null, jobId=null} = addObj\r\n    const addressObj = {\r\n        country,\r\n        state,\r\n        city,\r\n        subUrb,\r\n        location: {type:'Point', coordinates:[long,lat], crs: { type: 'name', properties: { name: 'EPSG:4326'} }},\r\n        location_m: {type:'Point', coordinates:[long,lat], crs: { type: 'name', properties: { name: 'EPSG:3857'} }},\r\n        longitude:long,\r\n        latitude:lat,\r\n        coordinate:`${long} ${lat}`,\r\n        userId, \r\n        serviceId, \r\n        jobId\r\n    }\r\n\r\n    const userAddress = await findUserAddress(userId)\r\n\r\n    if(userAddress.length > 0) {\r\n        return next({statusCode:403, message: ADDRESS_ALREADY_CREATED})\r\n    }\r\n\r\n    return await Address.create(addressObj)\r\n}"],"mappings":"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"}