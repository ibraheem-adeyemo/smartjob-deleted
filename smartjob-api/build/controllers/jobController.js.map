{"version":3,"file":"jobController.js","names":["_Responses","_interopRequireDefault","require","_jobServices","createJobController","req","res","reqBody","body","images","file","console","log","Responses","setSuccess","send","exports","getAllJobsController","_ref","_asyncToGenerator2","_regenerator","mark","_callee","allJobs","wrap","_callee$","_context","prev","next","getAllJobsService","sent","t0","setError","stop","_x","_x2","apply","arguments","editJobController","deleteJobController","getASingleJobController"],"sources":["../../src/controllers/jobController.js"],"sourcesContent":["import Responses from \"../utils/Responses\"\r\nimport { createAJobService, getAllJobsService } from \"../services/jobServices\";\r\n\r\nconst createJobController = (req, res) => {\r\n    let reqBody = req.body\r\n    reqBody.images = req.file\r\n    // const reqImg = req\r\n    \r\n    console.log(reqBody, req.file)\r\n    // createAJobService(reqBody);\r\n    Responses.setSuccess(200, 'you just created a job');\r\n    Responses.send(res)\r\n}\r\n\r\nconst getAllJobsController = async (req, res) => {\r\n    try {\r\n        const allJobs = await getAllJobsService()\r\n        console.log(allJobs)\r\n        Responses.setSuccess(200, 'endpoint to get all jobs');\r\n        Responses.send(res);\r\n    } catch (error) {\r\n        console.log(error);\r\n        Responses.setError(500, 'error from the data base');\r\n        Responses.send(res);\r\n    }\r\n}\r\n\r\nconst editJobController = (req, res) => {\r\n    Responses.setSuccess(200, 'endpoint to edit a single job')\r\n    Responses.send(res)\r\n}\r\nconst deleteJobController = (req, res) => {\r\n    Responses.setSuccess(200, 'endpoint to delete a single job')\r\n    Responses.send(res)\r\n}\r\n\r\nconst getASingleJobController = (req,res) => {\r\n    Responses.setSuccess(200, 'endpoint to delete a single job')\r\n    Responses.send(res)\r\n}\r\nexport {\r\n    createJobController,\r\n    getAllJobsController,\r\n    editJobController,\r\n    deleteJobController,\r\n    getASingleJobController\r\n}"],"mappings":";;;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAEA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,GAAG,EAAEC,GAAG,EAAK;EACtC,IAAIC,OAAO,GAAGF,GAAG,CAACG,IAAI;EACtBD,OAAO,CAACE,MAAM,GAAGJ,GAAG,CAACK,IAAI;EACzB;;EAEAC,OAAO,CAACC,GAAG,CAACL,OAAO,EAAEF,GAAG,CAACK,IAAI,CAAC;EAC9B;EACAG,qBAAS,CAACC,UAAU,CAAC,GAAG,EAAE,wBAAwB,CAAC;EACnDD,qBAAS,CAACE,IAAI,CAACT,GAAG,CAAC;AACvB,CAAC;AAAAU,OAAA,CAAAZ,mBAAA,GAAAA,mBAAA;AAED,IAAMa,oBAAoB;EAAA,IAAAC,IAAA,OAAAC,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAAG,SAAAC,QAAOjB,GAAG,EAAEC,GAAG;IAAA,IAAAiB,OAAA;IAAA,OAAAH,YAAA,YAAAI,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAE,IAAA;UAAA,OAEd,IAAAC,8BAAiB,GAAE;QAAA;UAAnCN,OAAO,GAAAG,QAAA,CAAAI,IAAA;UACbnB,OAAO,CAACC,GAAG,CAACW,OAAO,CAAC;UACpBV,qBAAS,CAACC,UAAU,CAAC,GAAG,EAAE,0BAA0B,CAAC;UACrDD,qBAAS,CAACE,IAAI,CAACT,GAAG,CAAC;UAACoB,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAK,EAAA,GAAAL,QAAA;UAEpBf,OAAO,CAACC,GAAG,CAAAc,QAAA,CAAAK,EAAA,CAAO;UAClBlB,qBAAS,CAACmB,QAAQ,CAAC,GAAG,EAAE,0BAA0B,CAAC;UACnDnB,qBAAS,CAACE,IAAI,CAACT,GAAG,CAAC;QAAC;QAAA;UAAA,OAAAoB,QAAA,CAAAO,IAAA;MAAA;IAAA,GAAAX,OAAA;EAAA,CAE3B;EAAA,gBAXKL,oBAAoBA,CAAAiB,EAAA,EAAAC,GAAA;IAAA,OAAAjB,IAAA,CAAAkB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAWzB;AAAArB,OAAA,CAAAC,oBAAA,GAAAA,oBAAA;AAED,IAAMqB,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIjC,GAAG,EAAEC,GAAG,EAAK;EACpCO,qBAAS,CAACC,UAAU,CAAC,GAAG,EAAE,+BAA+B,CAAC;EAC1DD,qBAAS,CAACE,IAAI,CAACT,GAAG,CAAC;AACvB,CAAC;AAAAU,OAAA,CAAAsB,iBAAA,GAAAA,iBAAA;AACD,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIlC,GAAG,EAAEC,GAAG,EAAK;EACtCO,qBAAS,CAACC,UAAU,CAAC,GAAG,EAAE,iCAAiC,CAAC;EAC5DD,qBAAS,CAACE,IAAI,CAACT,GAAG,CAAC;AACvB,CAAC;AAAAU,OAAA,CAAAuB,mBAAA,GAAAA,mBAAA;AAED,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAInC,GAAG,EAACC,GAAG,EAAK;EACzCO,qBAAS,CAACC,UAAU,CAAC,GAAG,EAAE,iCAAiC,CAAC;EAC5DD,qBAAS,CAACE,IAAI,CAACT,GAAG,CAAC;AACvB,CAAC;AAAAU,OAAA,CAAAwB,uBAAA,GAAAA,uBAAA"}